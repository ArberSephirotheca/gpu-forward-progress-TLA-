#version 430
#pragma scheduler(OBE)

layout(set = 0, binding = 0) volatile buffer TEST {
	uint x;
} test; 

layout(set = 0, binding = 1) volatile buffer TESTY {
	uint y;
} testy;

layout(set = 0, binding = 2) volatile buffer COUNTER {
	uint counter;
} counter;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(tla_subgroup_size = 1) in;
layout(tla_num_workgroups = 2) in;

void main()
{
	uint gid_x = gl_GlobalInvocationID.x;
	int pc = 0;

	if (gid_x == 0) { 
	   int terminate = 0;

	while (true) {
	   if (terminate == 1) {
	   break;
	}
	switch(pc) {

	  case 0: 
		if (atomicAdd(test.x, 0) == 0 ) { 
		   pc = 0;
		}
		else {
		   pc = pc + 1;
		}
		break;

	  case 1:
		terminate = 1;
		break;

	     }
	   }
	}

	if (gid_x == 1) { 
	   int terminate = 0;

	while (true) {
	   if (terminate == 1) {
	   break;
	}
	switch(pc) {

	  case 0: 
		atomicExchange(test.x, 1);
		pc = pc + 1;
		break;

	  case 1:
		terminate = 1;
		break;

	     }
	   }
	}

	atomicAdd(counter.counter, 1);
}